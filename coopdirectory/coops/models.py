from django.db import models
from django.db.models import permalink
from django.contrib.auth.models import User

from django.core.files.storage import FileSystemStorage

#
# Coop Users
#
# We extend the standard Django user class because it's easier for now.
#

class CoopUser(models.Model):
    user = models.OneToOneField(User)
    contactable = models.OneToOneField('Contactable')

#
# Customizable Questions
#
# Each Question:
#  * allows 0 or more FixedAnswers detailing a multiple choice selection
#  * allows an optional free text response
#  * require exactly 1 answer, any number of answers, or a particular minimum/maximum pair

class QuestionCategory(models.Model):
    label = models.CharField(max_length=50)
    parent = models.ForeignKey('QuestionCategory', null=True)

class Question(models.Model):
    question = models.CharField(max_length=100)
    moderated = models.BooleanField()
    # Presentation
    category = models.ForeignKey(QuestionCategory, null=True, blank=True)
    order = models.IntegerField()
    help_text = models.TextField(blank=True)
    min_answers = models.PositiveSmallIntegerField()
    max_answers = models.PositiveSmallIntegerField(null=True)
    free_text_answer_ok = models.BooleanField()
    # Meta
    created_by = models.ForeignKey(CoopUser, related_name="questions_created")
    updated_by = models.ForeignKey(CoopUser, related_name="questions_updated")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class FixedAnswer(models.Model):
    question = models.ForeignKey(Question, related_name="fixed_answers")
    rank = models.PositiveSmallIntegerField()
    answer = models.TextField()
    class Meta:
        unique_together = (('question', 'rank'),)

class AnswerSet(models.Model):
    question = models.ForeignKey(Question, related_name="answer_sets")
    fixed_answers = models.ManyToManyField(FixedAnswer, null=True, blank=True)
    free_text_answer = models.TextField(blank=True)
    created_by = models.ForeignKey(CoopUser)
    created_at = models.DateTimeField(auto_now_add=True)

#
# Contactable
# This provides contact information for both coops and individual users.
#

class Contactable(models.Model): pass

class Label(models.Model):
    label = models.CharField(max_length=15)
    rank = models.PositiveSmallIntegerField()
    class Meta:
        abstract = True
    def __unicode__(self):
        return self.label

class EmailLabel(Label): pass

class PhoneNumberLabel(Label): pass

class ContactMethod(models.Model):
    contactable = models.ForeignKey(Contactable)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        abstract = True

class Email(ContactMethod):
    label = models.ForeignKey(EmailLabel)
    email = models.EmailField()
    def __unicode__(self):
        return u"%s: %s" % [self.label, self.email]

class PhoneNumber(ContactMethod):
    label = models.ForeignKey(PhoneNumberLabel)
    phone_number = models.CharField(max_length=20)
    def __unicode__(self):
        return u"%s: %s" % [self.label, self.phone_number]


#
# Versioned Coops
#
# All optional meta-information is stored in AnswerSet instances.  For
# simplicity, required fields (e.g., name, address) are stored in hard-coded
# fields, thus removing a need for privileging certain answer sets in some way.
#
# When somebody starts editing an existing Coop, we duplicate the existing Coop
# entry, copy all the existing values to it, set most_recent to the already existing id,
# and then save it.  A list of all coops is generated by doing a search for null.
# (note, some databases may be slow (sequential) for searching on null.  In that
# situation we can specify a hardcoded ID to function as "NULL".)
#
# XXX TODO: We need to specify some way of ordering and organizing
# the answer sets.  As of now, it's just an unordered set.

class Coop(models.Model):
    most_recent = models.ForeignKey('Coop', null=True)

    # Required manual-entry fields
    name = models.CharField(max_length=200)
    address = models.TextField()
    picture = models.ForeignKey('CoopPicture')
    contactable = models.ForeignKey(Contactable)
    related_coops = models.ManyToManyField('Coop', null=True, through='CoopRelationship', symmetrical=False)

    # Optional manual-entry fields
    categories = models.ManyToManyField('CoopCategory', null=True)
    answer_sets = models.ManyToManyField(AnswerSet)

    # Automatic fields
    created_by = models.ForeignKey(CoopUser, related_name="coops_created")
    created_at = models.DateTimeField(auto_now_add=True)

    def get_absolute_url(self):
        return ('show_coop', [str(self.id)])
    get_absolute_url = permalink(get_absolute_url)

    def __unicode__(self):
        return self.name

class CoopCategory(models.Model):
    category = models.CharField(max_length = 200)

# Relationships between coops.
class RelationshipType(models.Model):
    type = models.CharField(max_length = 50)

class CoopRelationship(models.Model):
    from_coop = models.ForeignKey(Coop)
    to_coop = models.ForeignKey(Coop)
    relationship_type = models.ForeignKey('RelationshipType')

class CoopPicture(models.Model):
    stock = models.BooleanField(default = False)
    picture = models.ImageField(upload_to = "uploads/coop_pictures/%Y/%m/")
